[
    {
        "id": "15f1dab.a9f8f25",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3bb7b73c.633fc8",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": ""
    },
    {
        "id": "858a73c2.a6403",
        "type": "amqp-server",
        "z": "",
        "host": "hst-rabbit-mq",
        "port": "5672",
        "vhost": "",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}"
    },
    {
        "id": "b49ba76c.19a108",
        "type": "mongodb3",
        "z": "",
        "uri": "mongodb://hst-mongodb:27017/post",
        "name": "Posts",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "97f15423.b3c8f8",
        "type": "twitter-credentials",
        "z": "",
        "screen_name": "rssarto"
    },
    {
        "id": "58b1acfe.4a4f04",
        "type": "amqp in",
        "z": "3bb7b73c.633fc8",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "hot-jobs-queue",
        "server": "858a73c2.a6403",
        "x": 146,
        "y": 61,
        "wires": [
            [
                "594068e5.4402c8"
            ]
        ]
    },
    {
        "id": "594068e5.4402c8",
        "type": "function",
        "z": "3bb7b73c.633fc8",
        "name": "generateJsonObject",
        "func": "const nlp = global.get('nlp');\nconst getUrls = global.get('getUrls');\nconsole.log('related links: ');\nconsole.log(getUrls(msg.payload));\nconst post = {\n  \"text\": msg.payload,\n  \"createdAt\" : new Date(),\n  \"entities\": nlp(msg.payload).topics().data(),\n  \"relatedLinks\": Array.from(getUrls(msg.payload))\n};\nmsg.payload = post;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 200,
        "y": 140,
        "wires": [
            [
                "97d82097.f4029"
            ]
        ]
    },
    {
        "id": "97d82097.f4029",
        "type": "switch",
        "z": "3bb7b73c.633fc8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "$count(msg.payload.relatedLinks) > 0",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 150,
        "y": 200,
        "wires": [
            [
                "642b52d2.0be70c",
                "e367255.eaf32d8"
            ]
        ]
    },
    {
        "id": "f1adda65.0b5b58",
        "type": "http request",
        "z": "3bb7b73c.633fc8",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": false,
        "url": "http://hst-hotjobsbackend:8080/api/v1/post/relatedLink/1/5?link={{{payload}}}",
        "tls": "",
        "proxy": "",
        "authType": "basic",
        "x": 656,
        "y": 422,
        "wires": [
            [
                "642b52d2.0be70c"
            ]
        ]
    },
    {
        "id": "616851d1.37444",
        "type": "function",
        "z": "3bb7b73c.633fc8",
        "name": "log array iteration",
        "func": "const nodeFetch = global.get('node-fetch');\n/*\nvar http = global.get('http');\n\nvar url = 'http://hst-hotjobsbackend:8080/api/v1/post/relatedLink/1/5?link=' + encodeURI(msg.payload);\n\nhttp.get(url, function(res){\n    var body = '';\n\n    res.on('data', function(chunk){\n        body += chunk;\n    });\n\n    res.on('end', function(){\n        var fbResponse = JSON.parse(body);\n        console.log(\"Got a response: \", fbResponse);\n        if( fbResponse.total > 0 ){\n            msg.payload = '';\n        }\n    });\n    return msg;\n}).on('error', function(e){\n      console.log(\"Got an error: \", e);\n});\n*/\nconst result = (async function() {\n    console.log('checking link is already recorded...');\n    let fetchResult;\n    await nodeFetch('http://hst-hotjobsbackend:8080/api/v1/post/relatedLink/1/5?link=' + encodeURI(msg.payload))\n    .then(function(res){console.log('nodeFetchRetorno');});\n    // Here fetch return the promise, so we need to await it again and parse according to our needs. So, the result code would be this\n    const data = await fetchResult.text();\n    console.log('resultado...')\n    console.log(data);\n    return data;\n})();\nif( result.total > 0 ){\n    msg.payload = '';\n}\n/*\nconsole.log(msg);\nif( msg.payload !== 'https://t.co/O0yw39hYef'){\n    msg.payload = '';\n}*/\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1074,
        "y": 279,
        "wires": [
            []
        ]
    },
    {
        "id": "e367255.eaf32d8",
        "type": "change",
        "z": "3bb7b73c.633fc8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "paths[\"path_1\"]",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 720,
        "wires": [
            [
                "bfc60689.3e6238"
            ]
        ]
    },
    {
        "id": "133438a0.be58b7",
        "type": "change",
        "z": "3bb7b73c.633fc8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "paths[\"path_2\"]",
                "pt": "msg",
                "to": "recordedArray",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 660,
        "wires": [
            [
                "bfc60689.3e6238"
            ]
        ]
    },
    {
        "id": "3618edd3.4fb4d2",
        "type": "function",
        "z": "3bb7b73c.633fc8",
        "name": "create iteration object result",
        "func": "const result = {\n    recordedArray: msg.payload\n};\nmsg = result;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 680,
        "y": 600,
        "wires": [
            [
                "133438a0.be58b7"
            ]
        ]
    },
    {
        "id": "642b52d2.0be70c",
        "type": "Serial Iterator",
        "z": "3bb7b73c.633fc8",
        "name": "test array iteration",
        "property": "payload.relatedLinks",
        "inputFlow": "input",
        "saveOutput": 1,
        "recursive": 0,
        "storeId": 0,
        "x": 650,
        "y": 540,
        "wires": [
            [
                "f1adda65.0b5b58"
            ],
            [
                "3618edd3.4fb4d2"
            ]
        ]
    },
    {
        "id": "bfc60689.3e6238",
        "type": "wait-paths",
        "z": "3bb7b73c.633fc8",
        "name": "",
        "paths": "[\"path_1\",\"path_2\"]",
        "timeout": 15000,
        "finalTimeout": 60000,
        "x": 630,
        "y": 720,
        "wires": [
            [
                "b17ee24f.588d8"
            ]
        ]
    },
    {
        "id": "d97e15df.1306b8",
        "type": "amqp out",
        "z": "15f1dab.a9f8f25",
        "name": "",
        "routingkey": "new-job",
        "iotype": "4",
        "ioname": "hot-jobs-queue",
        "server": "858a73c2.a6403",
        "x": 520,
        "y": 180,
        "wires": []
    },
    {
        "id": "be9f60a1.ae073",
        "type": "twitter in",
        "z": "15f1dab.a9f8f25",
        "twitter": "97f15423.b3c8f8",
        "tags": "java developer",
        "user": "false",
        "name": "java developer listener",
        "inputs": 0,
        "x": 197.5,
        "y": 115,
        "wires": [
            [
                "d97e15df.1306b8"
            ]
        ],
        "outputLabels": [
            "msg.payload"
        ]
    },
    {
        "id": "bd5f53b5.becad",
        "type": "twitter in",
        "z": "15f1dab.a9f8f25",
        "twitter": "97f15423.b3c8f8",
        "tags": "backend developer",
        "user": "false",
        "name": "backend developer listener",
        "inputs": 0,
        "x": 210,
        "y": 180,
        "wires": [
            [
                "d97e15df.1306b8"
            ]
        ]
    },
    {
        "id": "12072824.7c2ec8",
        "type": "twitter in",
        "z": "15f1dab.a9f8f25",
        "twitter": "97f15423.b3c8f8",
        "tags": "fullstack developer",
        "user": "false",
        "name": "fullstack developer listener",
        "inputs": 0,
        "x": 210,
        "y": 240,
        "wires": [
            [
                "d97e15df.1306b8"
            ]
        ]
    },
    {
        "id": "b17ee24f.588d8",
        "type": "function",
        "z": "3bb7b73c.633fc8",
        "name": "check if any of links is already recorded",
        "func": "msg.isAlreadyRecorded = false;\nif( msg.paths.path_2.length > 0 ){\n    for(var index =0; index < msg.paths.path_2.length; index++ ){\n        const resultCheckUrl = msg.paths.path_2[index];\n        if( resultCheckUrl.total > 0 ){\n            msg.isAlreadyRecorded = true;\n            break;\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 715.5,
        "y": 791,
        "wires": [
            [
                "404ef20f.2e5c9c"
            ]
        ]
    },
    {
        "id": "404ef20f.2e5c9c",
        "type": "switch",
        "z": "3bb7b73c.633fc8",
        "name": "take not recorded posts",
        "property": "isAlreadyRecorded",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 665.5,
        "y": 851,
        "wires": [
            [
                "299f2ee5.662682"
            ],
            [
                "358f3925.b168b6"
            ]
        ]
    },
    {
        "id": "358f3925.b168b6",
        "type": "debug",
        "z": "3bb7b73c.633fc8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 915.5,
        "y": 857,
        "wires": []
    },
    {
        "id": "299f2ee5.662682",
        "type": "mongodb3 in",
        "z": "3bb7b73c.633fc8",
        "service": "_ext_",
        "configNode": "b49ba76c.19a108",
        "name": "",
        "collection": "post",
        "operation": "insertOne",
        "x": 658.5,
        "y": 915,
        "wires": [
            []
        ]
    }
]